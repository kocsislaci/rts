//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""UnitActionMap"",
            ""id"": ""71e8c460-5dc0-4b2b-b94d-3a42875e9bfb"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""0ad64ec6-dd7d-4030-a622-ce98caa10060"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""c346e967-4532-45da-82c8-bd16670c1d00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Execute"",
                    ""type"": ""Button"",
                    ""id"": ""5607b8fa-b900-433a-b34e-d0802e6238e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b97d8f4-88df-4e11-8db4-e29adda3a38c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""018415ef-5340-4c1f-bb35-c0556cc32ba1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f6913d-c316-48b2-a6bb-e225f14c7960"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMovementActionMap"",
            ""id"": ""1713dc32-0425-4dce-80b5-73956da5fc9d"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""08ad4b41-4db0-45aa-8bb8-ec6710ce1495"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GameMenu"",
                    ""type"": ""Button"",
                    ""id"": ""09518764-2df8-4759-947b-4c294f6f4ee7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""28bdfb47-e15f-46ed-8344-3899be8a660d"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9717a0e3-7a24-44e4-b2fd-5f27d18c649a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f44690da-3654-43b3-b09b-b2ce0f4031cd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7355b649-3207-4afd-9c5d-746b51ade01e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df1e0deb-50bd-4448-87fe-a1c077f0dd68"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a749323-1660-4e55-b555-c22632718b02"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""GameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UnitActionMap
        m_UnitActionMap = asset.FindActionMap("UnitActionMap", throwIfNotFound: true);
        m_UnitActionMap_MousePosition = m_UnitActionMap.FindAction("MousePosition", throwIfNotFound: true);
        m_UnitActionMap_Select = m_UnitActionMap.FindAction("Select", throwIfNotFound: true);
        m_UnitActionMap_Execute = m_UnitActionMap.FindAction("Execute", throwIfNotFound: true);
        // CameraMovementActionMap
        m_CameraMovementActionMap = asset.FindActionMap("CameraMovementActionMap", throwIfNotFound: true);
        m_CameraMovementActionMap_MoveCamera = m_CameraMovementActionMap.FindAction("MoveCamera", throwIfNotFound: true);
        m_CameraMovementActionMap_GameMenu = m_CameraMovementActionMap.FindAction("GameMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UnitActionMap
    private readonly InputActionMap m_UnitActionMap;
    private IUnitActionMapActions m_UnitActionMapActionsCallbackInterface;
    private readonly InputAction m_UnitActionMap_MousePosition;
    private readonly InputAction m_UnitActionMap_Select;
    private readonly InputAction m_UnitActionMap_Execute;
    public struct UnitActionMapActions
    {
        private @InputActions m_Wrapper;
        public UnitActionMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_UnitActionMap_MousePosition;
        public InputAction @Select => m_Wrapper.m_UnitActionMap_Select;
        public InputAction @Execute => m_Wrapper.m_UnitActionMap_Execute;
        public InputActionMap Get() { return m_Wrapper.m_UnitActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IUnitActionMapActions instance)
        {
            if (m_Wrapper.m_UnitActionMapActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnMousePosition;
                @Select.started -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnSelect;
                @Execute.started -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnExecute;
                @Execute.performed -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnExecute;
                @Execute.canceled -= m_Wrapper.m_UnitActionMapActionsCallbackInterface.OnExecute;
            }
            m_Wrapper.m_UnitActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Execute.started += instance.OnExecute;
                @Execute.performed += instance.OnExecute;
                @Execute.canceled += instance.OnExecute;
            }
        }
    }
    public UnitActionMapActions @UnitActionMap => new UnitActionMapActions(this);

    // CameraMovementActionMap
    private readonly InputActionMap m_CameraMovementActionMap;
    private ICameraMovementActionMapActions m_CameraMovementActionMapActionsCallbackInterface;
    private readonly InputAction m_CameraMovementActionMap_MoveCamera;
    private readonly InputAction m_CameraMovementActionMap_GameMenu;
    public struct CameraMovementActionMapActions
    {
        private @InputActions m_Wrapper;
        public CameraMovementActionMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCamera => m_Wrapper.m_CameraMovementActionMap_MoveCamera;
        public InputAction @GameMenu => m_Wrapper.m_CameraMovementActionMap_GameMenu;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovementActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ICameraMovementActionMapActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface != null)
            {
                @MoveCamera.started -= m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface.OnMoveCamera;
                @GameMenu.started -= m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface.OnGameMenu;
                @GameMenu.performed -= m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface.OnGameMenu;
                @GameMenu.canceled -= m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface.OnGameMenu;
            }
            m_Wrapper.m_CameraMovementActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
                @GameMenu.started += instance.OnGameMenu;
                @GameMenu.performed += instance.OnGameMenu;
                @GameMenu.canceled += instance.OnGameMenu;
            }
        }
    }
    public CameraMovementActionMapActions @CameraMovementActionMap => new CameraMovementActionMapActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IUnitActionMapActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnExecute(InputAction.CallbackContext context);
    }
    public interface ICameraMovementActionMapActions
    {
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnGameMenu(InputAction.CallbackContext context);
    }
}
